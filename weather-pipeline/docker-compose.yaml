# --- Apache Airflow 2.10.5 ---
# Archivo de configuración para el entorno de desarrollo de Airflow simple

x-airflow-common:
  &airflow-common
  # Usando la imagen personalizada con el Dockerfile
  build: ./airflow

  # Entorno de ejecución
  environment:
    &airflow-common-env
    AIRFLOW__CORE__EXECUTOR: LocalExecutor
    AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
    AIRFLOW__CORE__FERNET_KEY: ''
    AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
    AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
    AIRFLOW__API__AUTH_BACKENDS: 'airflow.api.auth.backend.basic_auth,airflow.api.auth.backend.session'
    AIRFLOW__SCHEDULER__ENABLE_HEALTH_CHECK: 'true'
    AIRFLOW__CORE__PYTHONPATH: /opt/airflow # Directorio de trabajo de Airflow
    _PIP_ADDITIONAL_REQUIREMENTS: ${_PIP_ADDITIONAL_REQUIREMENTS:-}

  # Volumenes de Airflow
    # Se montan los volúmenes de los DAGs y logs en el contenedor
    # Adicionalmente se monta el directorio de datos crudos, scripts y src
    # para que puedan ser utilizados por los DAGs
  volumes:
    # DAGs y logs de Airflow
    - ${AIRFLOW_PROJ_DIR:-.}/airflow/dags:/opt/airflow/dags
    - ${AIRFLOW_PROJ_DIR:-.}/airflow/logs:/opt/airflow/logs
    # Scripts utiles solo para los DAGs
    - ${AIRFLOW_PROJ_DIR:-.}/airflow/scripts:/opt/airflow/scripts 
    # Datos crudos
    - ${AIRFLOW_PROJ_DIR:-.}/data:/opt/airflow/data
    # Scripts adicionales compartidos entre otras aplicaciones
    - ${AIRFLOW_PROJ_DIR:-.}/src:/opt/airflow/src
    # Modelos de ML para el pipeline
    - ${AIRFLOW_PROJ_DIR:-.}/models:/opt/airflow/models
  
  # UID del usuario de Airflow
  user: "${AIRFLOW_UID:-50000}:0"

  # Depende de la base de datos PostgreSQL
  depends_on:
    &airflow-common-depends-on
    postgres:
      condition: service_healthy

# Definicion de los servicios
services:

  # Base de datos PostgreSQL
  postgres:
    image: postgres:13
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: airflow
    volumes:
      - postgres-db-volume:/var/lib/postgresql/data
    ports:
      - "5432:5432" # Puerto de PostgreSQL -> localhost:5432
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "airflow"]
      interval: 10s
      retries: 5
      start_period: 5s
    restart: always
  
  # --- Servicios de Airflow ---

  # Servidor web de Airflow para la interfaz de usuario
  airflow-webserver:
    <<: *airflow-common
    command: webserver
    ports:
      - "8080:8080" # Puerto del servidor web -> localhost:8080
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully

  # Scheduler de Airflow para la programación de tareas
  airflow-scheduler:
    <<: *airflow-common
    command: scheduler
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8974/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully
  
  # Inicializador de Airflow para crear la base de datos y los usuarios
    # Este servicio se ejecuta una sola vez al iniciar el contenedor
  airflow-init:
    <<: *airflow-common
    entrypoint: /bin/bash
    command:
      - -c
      - |
        if [[ -z "${AIRFLOW_UID}" ]]; then
          echo
          echo -e "\033[1;33mWARNING!!!: AIRFLOW_UID not set!\e[0m"
          echo "If you are on Linux, you SHOULD follow the instructions below to set "
          echo "AIRFLOW_UID environment variable, otherwise files will be owned by root."
          echo "For other operating systems you can get rid of the warning with manually created .env file:"
          echo "    See: https://airflow.apache.org/docs/apache-airflow/stable/howto/docker-compose/index.html#setting-the-right-airflow-user"
          echo
        fi
        one_meg=1048576
        mem_available=$$(($$(getconf _PHYS_PAGES) * $$(getconf PAGE_SIZE) / one_meg))
        cpus_available=$$(grep -cE 'cpu[0-9]+' /proc/stat)
        disk_available=$$(df / | tail -1 | awk '{print $$4}')
        warning_resources="false"
        if (( mem_available < 4000 )) ; then
          echo
          echo -e "\033[1;33mWARNING!!!: Not enough memory available for Docker.\e[0m"
          echo "At least 4GB of memory required. You have $$(numfmt --to iec $$((mem_available * one_meg)))"
          echo
          warning_resources="true"
        fi
        if (( cpus_available < 2 )); then
          echo
          echo -e "\033[1;33mWARNING!!!: Not enough CPUS available for Docker.\e[0m"
          echo "At least 2 CPUs recommended. You have $${cpus_available}"
          echo
          warning_resources="true"
        fi
        if (( disk_available < one_meg * 10 )); then
          echo
          echo -e "\033[1;33mWARNING!!!: Not enough Disk space available for Docker.\e[0m"
          echo "At least 10 GBs recommended. You have $$(numfmt --to iec $$((disk_available * 1024 )))"
          echo
          warning_resources="true"
        fi
        if [[ $${warning_resources} == "true" ]]; then
          echo
          echo -e "\033[1;33mWARNING!!!: You have not enough resources to run Airflow (see above)!\e[0m"
          echo "Please follow the instructions to increase amount of resources available:"
          echo "   https://airflow.apache.org/docs/apache-airflow/stable/howto/docker-compose/index.html#before-you-begin"
          echo
        fi
        mkdir -p /opt/airflow/logs /opt/airflow/dags
        chown -R "${AIRFLOW_UID}:0" /opt/airflow/logs /opt/airflow/dags

        airflow db migrate
        airflow users create \
          --username ${_AIRFLOW_WWW_USER_USERNAME:-airflow} \
          --password ${_AIRFLOW_WWW_USER_PASSWORD:-airflow} \
          --firstname Admin \
          --lastname User \
          --role Admin \
          --email admin@example.com

        airflow variables import /opt/airflow/variables.json

        exec airflow version

    environment:
      <<: *airflow-common-env
      _AIRFLOW_DB_MIGRATE: 'true'
      _AIRFLOW_WWW_USER_CREATE: 'true'
      _AIRFLOW_WWW_USER_USERNAME: ${_AIRFLOW_WWW_USER_USERNAME:-airflow}
      _AIRFLOW_WWW_USER_PASSWORD: ${_AIRFLOW_WWW_USER_PASSWORD:-airflow}
      _PIP_ADDITIONAL_REQUIREMENTS: ''
    user: "0:0"
    volumes:
      - ${AIRFLOW_PROJ_DIR:-.}/airflow/variables.json:/opt/airflow/variables.json
      - ${AIRFLOW_PROJ_DIR:-.}:/sources

  # Comando de Airflow para ejecutar tareas
    # Este servicio se utiliza para ejecutar tareas de Airflow desde la línea de comandos
    # Se puede utilizar para ejecutar tareas de prueba o depuración
  airflow-cli:
    <<: *airflow-common
    profiles:
      - debug
    environment:
      <<: *airflow-common-env
      CONNECTION_CHECK_MAX_COUNT: "0"
    command:
      - bash
      - -c
      - airflow

# Volumenes de datos
  # Se utilizan para almacenar los datos de la base de datos PostgreSQL
  # y los DAGs de Airflow
volumes:
  postgres-db-volume: